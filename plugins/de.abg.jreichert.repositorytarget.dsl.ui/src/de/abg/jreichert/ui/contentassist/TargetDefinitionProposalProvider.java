/*
 * generated by Xtext
 */
package de.abg.jreichert.ui.contentassist;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import de.abg.jreichert.repositorytarget.xml.ContentJarParser;
import de.abg.jreichert.repositorytarget.xml.ContentXmlHandler;
import de.abg.jreichert.targetDefinition.Location;
import de.abg.jreichert.targetDefinition.Unit;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class TargetDefinitionProposalProvider extends
		AbstractTargetDefinitionProposalProvider {
	private static String FEATURE_GROUP = ".feature.group";
	
	private Map<String, SortedMap<String, SortedSet<String>>> urlToCategoryIdsToVersions = new HashMap<String, SortedMap<String, SortedSet<String>>>();

	@Override
	public void completeUnit_CategoryId(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		StyledString displayString = null;
		ICompletionProposal proposal = null;
		Location location = getLocation(model);
		if (location != null) {
			String repositoryLocation = location.getRepositoryLocation();
			if (repositoryLocation != null) {
				fill(repositoryLocation);
				Set<String> ids = urlToCategoryIdsToVersions.get(
						repositoryLocation).keySet();
				for (String id : ids) {
					displayString = new StyledString(id);
					proposal = doCreateProposal(id, displayString, null, 0,
							context);
					acceptor.accept(proposal);
				}
			}
		}
	}

	private void fill(String repositoryLocation) {
		if (repositoryLocation != null) {
			if (urlToCategoryIdsToVersions.get(repositoryLocation) == null) {
				ContentJarParser parser = new ContentJarParser(
						repositoryLocation);
				ContentXmlHandler contentHandler = new ContentXmlHandler();
				for (String content : parser.getContents()) {
					parser.parse(content, contentHandler);
				}
				urlToCategoryIdsToVersions.put(repositoryLocation,
						contentHandler.getIdToVersion());
			}
		}
	}

	private String getRepositoryLocation(Unit unit) {
		String repositoryLocation = null;
		Location location = (Location) unit.eContainer();
		if (location != null) {
			repositoryLocation = location.getRepositoryLocation();
		}
		return repositoryLocation;
	}

	private Unit getUnit(EObject model) {
		return getType(model, Unit.class);
	}

	private Location getLocation(EObject model) {
		return getType(model, Location.class);
	}

	@SuppressWarnings({ "unchecked" })
	private <T> T getType(EObject model, Class<T> clazz) {
		T type = null;
		if (clazz.isAssignableFrom(model.getClass())) {
			type = (T) model;
		}
		return type;
	}

	@Override
	public void completeUnit_Version(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		StyledString displayString = null;
		ICompletionProposal proposal = null;
		Unit unit = getUnit(model);
		if (unit != null) {
			String repositoryLocation = getRepositoryLocation(unit);
			if (repositoryLocation != null) {
				String categoryId = unit.getCategoryId();
				if (categoryId != null) {
					fill(repositoryLocation);
					categoryId = unit.isNoFeature() || categoryId.endsWith(FEATURE_GROUP) ? categoryId : categoryId + ".feature.group";
					Set<String> versions = urlToCategoryIdsToVersions.get(
							repositoryLocation).get(categoryId);
					if (versions != null) {
						for (String version : versions) {
							if (version != null) {
								displayString = new StyledString(version);
								proposal = doCreateProposal(version,
										displayString, null, 0, context);
								acceptor.accept(proposal);
							}
						}
					}
				}
			}
		}
	}
}
