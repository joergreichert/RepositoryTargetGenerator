/*
* generated by Xtext
*/

package de.abg.jreichert.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TargetDefinitionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTargetFileKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetFileNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTargetFileNameIDTerminalRuleCall_2_2_0 = (RuleCall)cTargetFileNameAssignment_2_2.eContents().get(0);
		private final Assignment cLocationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationsLocationParserRuleCall_3_0 = (RuleCall)cLocationsAssignment_3.eContents().get(0);
		
		//Target:
		//
		//	"TargetDefinition" name=STRING ("targetFile" "=" targetFileName=ID)? locations+=Location*;
		public ParserRule getRule() { return rule; }

		//"TargetDefinition" name=STRING ("targetFile" "=" targetFileName=ID)? locations+=Location*
		public Group getGroup() { return cGroup; }

		//"TargetDefinition"
		public Keyword getTargetDefinitionKeyword_0() { return cTargetDefinitionKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//("targetFile" "=" targetFileName=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"targetFile"
		public Keyword getTargetFileKeyword_2_0() { return cTargetFileKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//targetFileName=ID
		public Assignment getTargetFileNameAssignment_2_2() { return cTargetFileNameAssignment_2_2; }

		//ID
		public RuleCall getTargetFileNameIDTerminalRuleCall_2_2_0() { return cTargetFileNameIDTerminalRuleCall_2_2_0; }

		//locations+=Location*
		public Assignment getLocationsAssignment_3() { return cLocationsAssignment_3; }

		//Location
		public RuleCall getLocationsLocationParserRuleCall_3_0() { return cLocationsLocationParserRuleCall_3_0; }
	}

	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRepositoryLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRepositoryLocationURLTerminalRuleCall_1_0 = (RuleCall)cRepositoryLocationAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitUnitParserRuleCall_3_0 = (RuleCall)cUnitAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Location:
		//
		//	name=STRING? repositoryLocation=URL "{" unit+=Unit ("," unit+=Unit)* "}";
		public ParserRule getRule() { return rule; }

		//name=STRING? repositoryLocation=URL "{" unit+=Unit ("," unit+=Unit)* "}"
		public Group getGroup() { return cGroup; }

		//name=STRING?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//repositoryLocation=URL
		public Assignment getRepositoryLocationAssignment_1() { return cRepositoryLocationAssignment_1; }

		//URL
		public RuleCall getRepositoryLocationURLTerminalRuleCall_1_0() { return cRepositoryLocationURLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//unit+=Unit
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }

		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_0() { return cUnitUnitParserRuleCall_3_0; }

		//("," unit+=Unit)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//unit+=Unit
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }

		//Unit
		public RuleCall getUnitUnitParserRuleCall_4_1_0() { return cUnitUnitParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCategoryIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCategoryIdIDTerminalRuleCall_0_0 = (RuleCall)cCategoryIdAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVERSIONTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Assignment cNoFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoFeatureNoFeatureKeyword_2_0 = (Keyword)cNoFeatureAssignment_2.eContents().get(0);
		
		//Unit:
		//
		//	categoryId=ID version=VERSION? noFeature?="noFeature"?;
		public ParserRule getRule() { return rule; }

		//categoryId=ID version=VERSION? noFeature?="noFeature"?
		public Group getGroup() { return cGroup; }

		//categoryId=ID
		public Assignment getCategoryIdAssignment_0() { return cCategoryIdAssignment_0; }

		//ID
		public RuleCall getCategoryIdIDTerminalRuleCall_0_0() { return cCategoryIdIDTerminalRuleCall_0_0; }

		//version=VERSION?
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_1_0() { return cVersionVERSIONTerminalRuleCall_1_0; }

		//noFeature?="noFeature"?
		public Assignment getNoFeatureAssignment_2() { return cNoFeatureAssignment_2; }

		//"noFeature"
		public Keyword getNoFeatureNoFeatureKeyword_2_0() { return cNoFeatureNoFeatureKeyword_2_0; }
	}
	
	
	private TargetElements pTarget;
	private LocationElements pLocation;
	private UnitElements pUnit;
	private TerminalRule tURL;
	private TerminalRule tID;
	private TerminalRule tVERSION;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public TargetDefinitionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.abg.jreichert.TargetDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Target:
	//
	//	"TargetDefinition" name=STRING ("targetFile" "=" targetFileName=ID)? locations+=Location*;
	public TargetElements getTargetAccess() {
		return (pTarget != null) ? pTarget : (pTarget = new TargetElements());
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//Location:
	//
	//	name=STRING? repositoryLocation=URL "{" unit+=Unit ("," unit+=Unit)* "}";
	public LocationElements getLocationAccess() {
		return (pLocation != null) ? pLocation : (pLocation = new LocationElements());
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}

	//Unit:
	//
	//	categoryId=ID version=VERSION? noFeature?="noFeature"?;
	public UnitElements getUnitAccess() {
		return (pUnit != null) ? pUnit : (pUnit = new UnitElements());
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//terminal URL:
	//
	//	("http" | "https") "://" ("a".."z" | "A".."Z" | "?" | "&" | "%" | "$" | "/" | "." | "_" | "-" | "0".."9")*;
	public TerminalRule getURLRule() {
		return (tURL != null) ? tURL : (tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL"));
	} 

	//terminal ID:
	//
	//	("a".."z" | "A".."Z" | "_" | "." | "-") ("a".."z" | "A".."Z" | "_" | "." | "-" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal VERSION:
	//
	//	"0".."9"* ("." ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*)*;
	public TerminalRule getVERSIONRule() {
		return (tVERSION != null) ? tVERSION : (tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VERSION"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
