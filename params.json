{"name":"Repository Target Generator","tagline":"Editor and Generator for .target and category.xml","body":"# Install\r\n\r\nUpdate site: http://joergreichert.github.io/RepositoryTargetGenerator/updatesite/\r\n\r\n# Editing\r\n\r\n## Auto completion\r\n\r\nAfter having defined the URL of a repository you get auto completion for the features resp. plug-ins contained in this P2 repository or update site. \r\n\r\nHaving a plug-in selected you can further trigger auto completion of the versions the selected element is available in.\r\n\r\n![DSL Editor](https://raw.github.com/joergreichert/RepositoryTargetGenerator/master/wiki/TargetDefEditor.png)\r\n\r\n## Category assignment\r\n\r\nIt is possible to define categories to be used to group the items in the generated category.xml.\r\n\r\nYou can then can assign one or more category to the units directly. Additionally you can also assign categories to the location, then these selection is applied to all units that don't have categories assigned directly.  \r\n\r\n![Categories in DSL](http://joergreichert.github.io/RepositoryTargetGenerator/images/categories.png)\r\n\r\nIn the generated category.xml you can see the items grouped by category.\r\n\r\n![Categories generated](http://joergreichert.github.io/RepositoryTargetGenerator/images/categories_generated.png)\r\n\r\n## Versioning\r\n\r\nAs the category.xml is used to build P2 repositories but the actually resolution of the items is done against the target definition file you can set the version in category.xml to 0.0.0 so the latest available version in the target platform is used. If you want to specify for whatever reasion the exact version you can write \"strictVersion\" beside certain units or beside the location to apply strict versioning for all units of this repository.\r\n\r\n# Validation\r\n\r\nThere is a context menu entry \"Validate\" to check the URLs, categoryIds and versions in the given target definition.\r\n\r\n![Validate Button](http://joergreichert.github.io/RepositoryTargetGenerator/images/validate.png)\r\n\r\nThese validation take some time as the repositories have to be visited thus this process runs in background.\r\n\r\n![Validation in background](http://joergreichert.github.io/RepositoryTargetGenerator/images/xtext_validation_background.png)\r\n\r\nFor non existing URIs, categoryIds and versions there are produced error markers, if there are newer versions there are warn markers created.\r\n\r\n![Markers in the DSL editor](http://joergreichert.github.io/RepositoryTargetGenerator/images/marker.png)\r\n\r\nFor the warn markers there are offered quickfixes to update the current version with the last available one.\r\n\r\n![Quickfixes in the DSL editor](http://joergreichert.github.io/RepositoryTargetGenerator/images/marker_update_version.png)\r\n\r\n# Generation\r\n\r\nWhen saving the targetdef file a target file and a category.xml file are generated within the projects's src-gen folder. The name of the generated target file you can influence by specifying the target file name inside the targetdef file.\r\n\r\n# Transformation\r\n\r\nIn some cases you may already have an existing target file in place. With the context menu action \"Generate targetdef\" you are able to transform this file into the targetdef format.\r\n\r\n![Transform existing target file](http://joergreichert.github.io/RepositoryTargetGenerator/images/generate_targetdef.png)\r\n\r\n***\r\n\r\nNavigate back to [overview](http://joergreichert.github.io).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}