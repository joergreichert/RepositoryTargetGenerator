/*
* generated by Xtext
*/
grammar InternalTargetDefinition;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.abg.jreichert.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.abg.jreichert.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.abg.jreichert.services.TargetDefinitionGrammarAccess;

}

@parser::members {
 
 	private TargetDefinitionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TargetDefinitionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTarget
entryRuleTarget 
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetAccess().getGroup()); }
(rule__Target__Group__0)
{ after(grammarAccess.getTargetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocation
entryRuleLocation 
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationAccess().getGroup()); }
(rule__Location__Group__0)
{ after(grammarAccess.getLocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnit
entryRuleUnit 
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitAccess().getGroup()); }
(rule__Unit__Group__0)
{ after(grammarAccess.getUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Target__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__0__Impl
	rule__Target__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getTargetDefinitionKeyword_0()); }

	'TargetDefinition' 

{ after(grammarAccess.getTargetAccess().getTargetDefinitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__1__Impl
	rule__Target__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getNameAssignment_1()); }
(rule__Target__NameAssignment_1)
{ after(grammarAccess.getTargetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__2__Impl
	rule__Target__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getGroup_2()); }
(rule__Target__Group_2__0)?
{ after(grammarAccess.getTargetAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getLocationsAssignment_3()); }
(rule__Target__LocationsAssignment_3)*
{ after(grammarAccess.getTargetAccess().getLocationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Target__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group_2__0__Impl
	rule__Target__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getTargetFileKeyword_2_0()); }

	'targetFile' 

{ after(grammarAccess.getTargetAccess().getTargetFileKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group_2__1__Impl
	rule__Target__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getEqualsSignKeyword_2_1()); }

	'=' 

{ after(grammarAccess.getTargetAccess().getEqualsSignKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getTargetFileNameAssignment_2_2()); }
(rule__Target__TargetFileNameAssignment_2_2)
{ after(grammarAccess.getTargetAccess().getTargetFileNameAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Location__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__0__Impl
	rule__Location__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameAssignment_0()); }
(rule__Location__NameAssignment_0)?
{ after(grammarAccess.getLocationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__1__Impl
	rule__Location__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getRepositoryLocationAssignment_1()); }
(rule__Location__RepositoryLocationAssignment_1)
{ after(grammarAccess.getLocationAccess().getRepositoryLocationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__2__Impl
	rule__Location__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getLocationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__3__Impl
	rule__Location__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getUnitAssignment_3()); }
(rule__Location__UnitAssignment_3)
{ after(grammarAccess.getLocationAccess().getUnitAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__4__Impl
	rule__Location__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getGroup_4()); }
(rule__Location__Group_4__0)*
{ after(grammarAccess.getLocationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getLocationAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Location__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_4__0__Impl
	rule__Location__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getLocationAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getUnitAssignment_4_1()); }
(rule__Location__UnitAssignment_4_1)
{ after(grammarAccess.getLocationAccess().getUnitAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group__0__Impl
	rule__Unit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getCategoryIdAssignment_0()); }
(rule__Unit__CategoryIdAssignment_0)
{ after(grammarAccess.getUnitAccess().getCategoryIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group__1__Impl
	rule__Unit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getVersionAssignment_1()); }
(rule__Unit__VersionAssignment_1)?
{ after(grammarAccess.getUnitAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getNoFeatureAssignment_2()); }
(rule__Unit__NoFeatureAssignment_2)?
{ after(grammarAccess.getUnitAccess().getNoFeatureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Target__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getTargetAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TargetFileNameAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getTargetFileNameIDTerminalRuleCall_2_2_0()); }
	RULE_ID{ after(grammarAccess.getTargetAccess().getTargetFileNameIDTerminalRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Target__LocationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getLocationsLocationParserRuleCall_3_0()); }
	ruleLocation{ after(grammarAccess.getTargetAccess().getLocationsLocationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getLocationAccess().getNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__RepositoryLocationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getRepositoryLocationURLTerminalRuleCall_1_0()); }
	RULE_URL{ after(grammarAccess.getLocationAccess().getRepositoryLocationURLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__UnitAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getUnitUnitParserRuleCall_3_0()); }
	ruleUnit{ after(grammarAccess.getLocationAccess().getUnitUnitParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__UnitAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getUnitUnitParserRuleCall_4_1_0()); }
	ruleUnit{ after(grammarAccess.getLocationAccess().getUnitUnitParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__CategoryIdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getCategoryIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getUnitAccess().getCategoryIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
	RULE_VERSION{ after(grammarAccess.getUnitAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__NoFeatureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getNoFeatureNoFeatureKeyword_2_0()); }
(
{ before(grammarAccess.getUnitAccess().getNoFeatureNoFeatureKeyword_2_0()); }

	'noFeature' 

{ after(grammarAccess.getUnitAccess().getNoFeatureNoFeatureKeyword_2_0()); }
)

{ after(grammarAccess.getUnitAccess().getNoFeatureNoFeatureKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_URL : ('http'|'https') '://' ('a'..'z'|'A'..'Z'|'?'|'&'|'%'|'$'|'/'|'.'|'_'|'-'|'0'..'9')*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'.'|'-') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'0'..'9')*;

RULE_VERSION : ('0'..'9')* ('.' ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*)*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


